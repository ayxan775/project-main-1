"use strict";(()=>{var e={};e.id=221,e.ids=[221],e.modules={8432:e=>{e.exports=require("bcryptjs")},9344:e=>{e.exports=require("jsonwebtoken")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},661:e=>{e.exports=require("sqlite3")},2048:e=>{e.exports=require("fs")},5315:e=>{e.exports=require("path")},7360:e=>{e.exports=require("url")},8887:e=>{e.exports=import("sqlite")},6249:(e,t)=>{Object.defineProperty(t,"l",{enumerable:!0,get:function(){return function e(t,s){return s in t?t[s]:"then"in t&&"function"==typeof t.then?t.then(t=>e(t,s)):"function"==typeof t&&"default"===s?t:void 0}}})},3886:(e,t,s)=>{s.r(t),s.d(t,{config:()=>S,default:()=>f,routeModule:()=>N});var a={};s.r(a),s.d(a,{config:()=>m,default:()=>g});var r=s(1802),i=s(7153),o=s(6249),n=s(9344),c=s.n(n),u=s(2250),d=s(2048),l=s(5315);let p=process.env.JWT_SECRET||"your-secret-key",E=()=>{try{let e=l.join(process.cwd(),"data.db");return d.existsSync(e)}catch(e){return console.error("Error checking DB file:",e),!1}},T=e=>new Promise((t,s)=>{let a=e.headers.authorization;if(!a||!a.startsWith("Bearer ")){s(Error("Unauthorized"));return}let r=a.split(" ")[1];c().verify(r,p,(e,a)=>{if(e){s(Error("Unauthorized"));return}t(a)})}),m={api:{bodyParser:{sizeLimit:"10mb"}}};async function g(e,t){if(t.setHeader("Content-Type","application/json"),"OPTIONS"===e.method)return t.status(200).end();try{if(!E())try{await (0,u.u1)(),console.log("DB initialized in products API")}catch(e){return console.error("Failed to initialize database:",e),t.status(500).json({message:"Database initialization failed",error:e instanceof Error?e.message:String(e)})}if("GET"===e.method&&!e.query.id){let e=await (0,u.VK)(),s=(await e.all("SELECT * FROM products")).map(e=>({...e,specs:JSON.parse(e.specs||"[]"),useCases:JSON.parse(e.useCases||"[]"),images:JSON.parse(e.images||"[]")}));return t.status(200).json(s)}if("GET"===e.method&&e.query.id){let s=await (0,u.VK)(),a=await s.get("SELECT * FROM products WHERE id = ?",[e.query.id]);if(!a)return t.status(404).json({message:"Product not found"});let r={...a,specs:JSON.parse(a.specs||"[]"),useCases:JSON.parse(a.useCases||"[]"),images:JSON.parse(a.images||"[]")};return t.status(200).json(r)}try{await T(e)}catch(e){return t.status(401).json({message:"Unauthorized"})}if("POST"===e.method){let{name:s,description:a,image:r,specs:i,useCases:o,category:n,images:c,document:d}=e.body;if(!s)return t.status(400).json({message:"Product name is required"});let l=await (0,u.VK)(),p=await l.run("INSERT INTO products (name, description, image, specs, useCases, category, images, document) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",[s,a||"",r||"",JSON.stringify(i||[]),JSON.stringify(o||[]),n||"",JSON.stringify(c||[]),d||""]),E=await l.get("SELECT * FROM products WHERE id = ?",[p.lastID]);return t.status(201).json({...E,specs:JSON.parse(E.specs||"[]"),useCases:JSON.parse(E.useCases||"[]"),images:JSON.parse(E.images||"[]")})}if("PUT"===e.method&&e.query.id){let{name:s,description:a,image:r,specs:i,useCases:o,category:n,images:c,document:d}=e.body;if(!s)return t.status(400).json({message:"Product name is required"});let l=await (0,u.VK)();if(n&&!await l.get("SELECT 1 FROM categories WHERE name = ?",[n]))return t.status(400).json({message:"Selected category does not exist"});await l.run("UPDATE products SET name = ?, description = ?, image = ?, specs = ?, useCases = ?, category = ?, images = ?, document = ? WHERE id = ?",[s,a||"",r||"",JSON.stringify(i||[]),JSON.stringify(o||[]),n||"",JSON.stringify(c||[]),d||"",e.query.id]);let p=await l.get("SELECT * FROM products WHERE id = ?",[e.query.id]);if(!p)return t.status(404).json({message:"Product not found"});return t.status(200).json({...p,specs:JSON.parse(p.specs||"[]"),useCases:JSON.parse(p.useCases||"[]"),images:JSON.parse(p.images||"[]")})}if("DELETE"===e.method&&e.query.id){let s=await (0,u.VK)();if(!await s.get("SELECT * FROM products WHERE id = ?",[e.query.id]))return t.status(404).json({message:"Product not found"});return await s.run("DELETE FROM products WHERE id = ?",[e.query.id]),t.status(200).json({message:"Product deleted successfully"})}return t.status(405).json({message:"Method not allowed"})}catch(e){return console.error("Products API error:",e),t.status(500).json({message:"Internal server error"})}}let f=(0,o.l)(a,"default"),S=(0,o.l)(a,"config"),N=new r.PagesAPIRouteModule({definition:{kind:i.x.PAGES_API,page:"/api/products",pathname:"/api/products",bundlePath:"",filename:""},userland:a})},2250:(e,t,s)=>{s.d(t,{VK:()=>n,u1:()=>i});let a=async()=>{try{let e=await Promise.resolve().then(s.t.bind(s,2048,23)),t=(await Promise.resolve().then(s.t.bind(s,5315,23))).join(process.cwd(),"data.db");return e.existsSync(t)}catch(e){return console.error("Error checking if DB file exists:",e),!1}},r=!0;async function i(){try{let e=await a(),{open:t}=await Promise.resolve().then(s.bind(s,8887)),i=await Promise.resolve().then(s.t.bind(s,661,23)),n=await Promise.resolve().then(s.t.bind(s,8432,23)),c=await Promise.resolve().then(s.t.bind(s,5315,23)),u=await Promise.resolve().then(s.t.bind(s,7360,23));await Promise.resolve().then(s.t.bind(s,2048,23));let d=u.fileURLToPath("file:///home/user456/Documents/project-main-1/src/lib/db.ts");c.dirname(d);let l=c.join(process.cwd(),"data.db");console.log("Initializing database at:",l);let p=await t({filename:l,driver:i.default.Database});console.log("Connected to database"),await p.exec(`
      CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE NOT NULL,
        password TEXT NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      );

      CREATE TABLE IF NOT EXISTS categories (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT UNIQUE NOT NULL,
        description TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      );

      CREATE TABLE IF NOT EXISTS products (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        description TEXT,
        image TEXT,
        specs TEXT,
        useCases TEXT,
        category TEXT,
        images TEXT,
        document TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (category) REFERENCES categories(name)
      );
      
      CREATE TABLE IF NOT EXISTS job_openings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        department TEXT NOT NULL,
        location TEXT NOT NULL,
        type TEXT NOT NULL,
        description TEXT NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        active INTEGER DEFAULT 1
      );
    `),console.log("Database tables created");try{(await p.all("PRAGMA table_info(products)")).some(e=>"document"===e.name)||(await p.exec("ALTER TABLE products ADD COLUMN document TEXT"),console.log("Added document column to products table"))}catch(e){console.error("Error altering products table:",e)}if(!await p.get("SELECT * FROM users WHERE username = ?",["admin"])){let e=await n.hash("Azerbaycan123",10);await p.run("INSERT INTO users (username, password) VALUES (?, ?)",["admin",e]),console.log("Admin user created")}let E=await p.get("SELECT COUNT(*) as count FROM categories");if(0===E.count)for(let e of[{name:"Industrial Equipment",description:"Heavy-duty industrial machinery and equipment"},{name:"Safety Gear",description:"Personal protective equipment and safety solutions"},{name:"Measurement Tools",description:"Precision measurement and testing instruments"},{name:"Fluid Control",description:"Valves, pumps, and fluid management systems"},{name:"Power Systems",description:"Power generation and electrical equipment"},{name:"Construction Equipment",description:"Tools and equipment for construction projects"}])await p.run("INSERT INTO categories (name, description) VALUES (?, ?)",[e.name,e.description]);let T=await p.get("SELECT COUNT(*) as count FROM products");if(0===T.count&&!e&&r)try{let e=await Promise.resolve().then(s.t.bind(s,2048,23)),t=(await Promise.resolve().then(s.t.bind(s,5315,23))).join(process.cwd(),"src","data","products.json"),a=[];if(e.existsSync(t)){let s=e.readFileSync(t,"utf8");a=JSON.parse(s),console.log("Loaded products from JSON file")}else a=[{id:1,name:"Sample Product",description:"A sample product created automatically",image:"https://placehold.co/600x400?text=Sample+Product",specs:["Sample specification 1","Sample specification 2"],useCases:["Sample use case 1","Sample use case 2"],category:"Sample Category"}],console.log("Using default product as fallback");for(let e of a)await p.run("INSERT INTO products (id, name, description, image, specs, useCases, category) VALUES (?, ?, ?, ?, ?, ?, ?)",[e.id,e.name,e.description,e.image,JSON.stringify(e.specs),JSON.stringify(e.useCases),e.category]);console.log(`${a.length} products inserted into database`)}catch(e){console.error("Error importing initial products:",e)}r=!1;let m=await p.get("SELECT COUNT(*) as count FROM job_openings");if(0===m.count){for(let e of[{title:"Supply Chain Manager",department:"operations",location:"Baku, Azerbaijan",type:"Full-time",description:"Leading and optimizing supply chain operations..."},{title:"Sales Representative",department:"sales",location:"Baku, Azerbaijan",type:"Full-time",description:"Developing and maintaining client relationships..."},{title:"Logistics Coordinator",department:"logistics",location:"Baku, Azerbaijan",type:"Full-time",description:"Coordinating shipment schedules and delivery routes..."}])await p.run("INSERT INTO job_openings (title, department, location, type, description) VALUES (?, ?, ?, ?, ?)",[e.title,e.department,e.location,e.type,e.description]);console.log("Default job openings created")}return o=p,p}catch(e){throw console.error("Database initialization error:",e),e}}let o=null;async function n(){return o||(o=await i()),o}},7153:(e,t)=>{var s;Object.defineProperty(t,"x",{enumerable:!0,get:function(){return s}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(s||(s={}))},1802:(e,t,s)=>{e.exports=s(145)}};var t=require("../../webpack-api-runtime.js");t.C(e);var s=t(t.s=3886);module.exports=s})();