"use strict";(()=>{var e={};e.id=541,e.ids=[541],e.modules={8432:e=>{e.exports=require("bcryptjs")},9344:e=>{e.exports=require("jsonwebtoken")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},661:e=>{e.exports=require("sqlite3")},2048:e=>{e.exports=require("fs")},5315:e=>{e.exports=require("path")},7360:e=>{e.exports=require("url")},8887:e=>{e.exports=import("sqlite")},6249:(e,t)=>{Object.defineProperty(t,"l",{enumerable:!0,get:function(){return function e(t,a){return a in t?t[a]:"then"in t&&"function"==typeof t.then?t.then(t=>e(t,a)):"function"==typeof t&&"default"===a?t:void 0}}})},7342:(e,t,a)=>{a.r(t),a.d(t,{config:()=>f,default:()=>g,routeModule:()=>A});var r={};a.r(r),a.d(r,{default:()=>m});var s=a(1802),i=a(7153),n=a(6249),o=a(8432),c=a.n(o),l=a(9344),d=a.n(l),u=a(2250);let E=process.env.JWT_SECRET||"your-secret-key",p=!1,T=e=>new Promise((t,a)=>{let r=e.headers.authorization;if(!r||!r.startsWith("Bearer ")){a(Error("Unauthorized"));return}let s=r.split(" ")[1];d().verify(s,E,(e,r)=>{if(e){a(Error("Unauthorized"));return}t(r)})});async function m(e,t){try{p||(await (0,u.u1)(),p=!0);try{await T(e)}catch(e){return t.status(401).json({message:"Unauthorized"})}if("PUT"===e.method){let{username:a,currentPassword:r,newPassword:s}=e.body;if(!a||!r||!s)return t.status(400).json({message:"Username, current password, and new password are required"});let i=await (0,u.VK)(),n=await i.get("SELECT * FROM users WHERE username = ?",[a]);if(!n)return t.status(404).json({message:"User not found"});if(!await c().compare(r,n.password))return t.status(401).json({message:"Current password is incorrect"});let o=await c().hash(s,10);return await i.run("UPDATE users SET password = ? WHERE username = ?",[o,a]),t.status(200).json({message:"Password updated successfully"})}return t.status(405).json({message:"Method not allowed"})}catch(e){return console.error("User API error:",e),t.status(500).json({message:"Internal server error"})}}let g=(0,n.l)(r,"default"),f=(0,n.l)(r,"config"),A=new s.PagesAPIRouteModule({definition:{kind:i.x.PAGES_API,page:"/api/user",pathname:"/api/user",bundlePath:"",filename:""},userland:r})},2250:(e,t,a)=>{a.d(t,{VK:()=>o,u1:()=>i});let r=async()=>{try{let e=await Promise.resolve().then(a.t.bind(a,2048,23)),t=(await Promise.resolve().then(a.t.bind(a,5315,23))).join(process.cwd(),"data.db");return e.existsSync(t)}catch(e){return console.error("Error checking if DB file exists:",e),!1}},s=!0;async function i(){try{let e=await r(),{open:t}=await Promise.resolve().then(a.bind(a,8887)),i=await Promise.resolve().then(a.t.bind(a,661,23)),o=await Promise.resolve().then(a.t.bind(a,8432,23)),c=await Promise.resolve().then(a.t.bind(a,5315,23)),l=await Promise.resolve().then(a.t.bind(a,7360,23));await Promise.resolve().then(a.t.bind(a,2048,23));let d=l.fileURLToPath("file:///home/user456/Documents/project-main-1/src/lib/db.ts");c.dirname(d);let u=c.join(process.cwd(),"data.db");console.log("Initializing database at:",u);let E=await t({filename:u,driver:i.default.Database});console.log("Connected to database"),await E.exec(`
      CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE NOT NULL,
        password TEXT NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      );

      CREATE TABLE IF NOT EXISTS categories (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT UNIQUE NOT NULL,
        description TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      );

      CREATE TABLE IF NOT EXISTS products (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        description TEXT,
        image TEXT,
        specs TEXT,
        useCases TEXT,
        category TEXT,
        images TEXT,
        document TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (category) REFERENCES categories(name)
      );
      
      CREATE TABLE IF NOT EXISTS job_openings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        department TEXT NOT NULL,
        location TEXT NOT NULL,
        type TEXT NOT NULL,
        description TEXT NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        active INTEGER DEFAULT 1
      );
    `),console.log("Database tables created");try{(await E.all("PRAGMA table_info(products)")).some(e=>"document"===e.name)||(await E.exec("ALTER TABLE products ADD COLUMN document TEXT"),console.log("Added document column to products table"))}catch(e){console.error("Error altering products table:",e)}if(!await E.get("SELECT * FROM users WHERE username = ?",["admin"])){let e=await o.hash("Azerbaycan123",10);await E.run("INSERT INTO users (username, password) VALUES (?, ?)",["admin",e]),console.log("Admin user created")}let p=await E.get("SELECT COUNT(*) as count FROM categories");if(0===p.count)for(let e of[{name:"Industrial Equipment",description:"Heavy-duty industrial machinery and equipment"},{name:"Safety Gear",description:"Personal protective equipment and safety solutions"},{name:"Measurement Tools",description:"Precision measurement and testing instruments"},{name:"Fluid Control",description:"Valves, pumps, and fluid management systems"},{name:"Power Systems",description:"Power generation and electrical equipment"},{name:"Construction Equipment",description:"Tools and equipment for construction projects"}])await E.run("INSERT INTO categories (name, description) VALUES (?, ?)",[e.name,e.description]);let T=await E.get("SELECT COUNT(*) as count FROM products");if(0===T.count&&!e&&s)try{let e=await Promise.resolve().then(a.t.bind(a,2048,23)),t=(await Promise.resolve().then(a.t.bind(a,5315,23))).join(process.cwd(),"src","data","products.json"),r=[];if(e.existsSync(t)){let a=e.readFileSync(t,"utf8");r=JSON.parse(a),console.log("Loaded products from JSON file")}else r=[{id:1,name:"Sample Product",description:"A sample product created automatically",image:"https://placehold.co/600x400?text=Sample+Product",specs:["Sample specification 1","Sample specification 2"],useCases:["Sample use case 1","Sample use case 2"],category:"Sample Category"}],console.log("Using default product as fallback");for(let e of r)await E.run("INSERT INTO products (id, name, description, image, specs, useCases, category) VALUES (?, ?, ?, ?, ?, ?, ?)",[e.id,e.name,e.description,e.image,JSON.stringify(e.specs),JSON.stringify(e.useCases),e.category]);console.log(`${r.length} products inserted into database`)}catch(e){console.error("Error importing initial products:",e)}s=!1;let m=await E.get("SELECT COUNT(*) as count FROM job_openings");if(0===m.count){for(let e of[{title:"Supply Chain Manager",department:"operations",location:"Baku, Azerbaijan",type:"Full-time",description:"Leading and optimizing supply chain operations..."},{title:"Sales Representative",department:"sales",location:"Baku, Azerbaijan",type:"Full-time",description:"Developing and maintaining client relationships..."},{title:"Logistics Coordinator",department:"logistics",location:"Baku, Azerbaijan",type:"Full-time",description:"Coordinating shipment schedules and delivery routes..."}])await E.run("INSERT INTO job_openings (title, department, location, type, description) VALUES (?, ?, ?, ?, ?)",[e.title,e.department,e.location,e.type,e.description]);console.log("Default job openings created")}return n=E,E}catch(e){throw console.error("Database initialization error:",e),e}}let n=null;async function o(){return n||(n=await i()),n}},7153:(e,t)=>{var a;Object.defineProperty(t,"x",{enumerable:!0,get:function(){return a}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(a||(a={}))},1802:(e,t,a)=>{e.exports=a(145)}};var t=require("../../webpack-api-runtime.js");t.C(e);var a=t(t.s=7342);module.exports=a})();