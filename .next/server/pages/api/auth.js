"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/auth";
exports.ids = ["pages/api/auth"];
exports.modules = {

/***/ "bcryptjs":
/*!***************************!*\
  !*** external "bcryptjs" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("bcryptjs");

/***/ }),

/***/ "jsonwebtoken":
/*!*******************************!*\
  !*** external "jsonwebtoken" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("jsonwebtoken");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "sqlite3":
/*!**************************!*\
  !*** external "sqlite3" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("sqlite3");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "sqlite":
/*!*************************!*\
  !*** external "sqlite" ***!
  \*************************/
/***/ ((module) => {

module.exports = import("sqlite");;

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fauth&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fauth.ts&middlewareConfigBase64=e30%3D!":
/*!**************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fauth&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fauth.ts&middlewareConfigBase64=e30%3D! ***!
  \**************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_auth_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/auth.ts */ \"(api)/./pages/api/auth.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_auth_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_auth_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/auth\",\n        pathname: \"/api/auth\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_auth_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmF1dGgmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyUyRmFwaSUyRmF1dGgudHMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDZ0Q7QUFDaEQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLCtDQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQywrQ0FBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aXRlLXJlYWN0LXR5cGVzY3JpcHQtc3RhcnRlci8/Yjc2NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXMvYXBpL2F1dGgudHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9hdXRoXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYXV0aFwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fauth&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fauth.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/auth.ts":
/*!***************************!*\
  !*** ./pages/api/auth.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bcryptjs */ \"bcryptjs\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bcryptjs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _src_lib_db__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../src/lib/db */ \"(api)/./src/lib/db.ts\");\n\n\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\n// Initialize DB flag\nlet dbInitialized = false;\nconst failedLoginAttempts = {};\nconst blockedIPs = {}; // Stores IP -> blockedUntil timestamp\nconst MAX_FAILED_ATTEMPTS = 3;\nconst BLOCK_DURATION_MS = 15 * 60 * 1000; // 15 minutes\nconst ATTEMPT_WINDOW_MS = 5 * 60 * 1000; // Reset attempts if no new attempt in 5 mins\nfunction getClientIp(req) {\n    const xForwardedFor = req.headers[\"x-forwarded-for\"];\n    if (typeof xForwardedFor === \"string\") {\n        return xForwardedFor.split(\",\")[0].trim();\n    }\n    const xRealIp = req.headers[\"x-real-ip\"];\n    if (typeof xRealIp === \"string\") {\n        return xRealIp.trim();\n    }\n    return req.socket.remoteAddress || \"unknown\";\n}\nasync function handler(req, res) {\n    // Set proper JSON content type\n    res.setHeader(\"Content-Type\", \"application/json\");\n    // Handle preflight OPTIONS request for CORS\n    if (req.method === \"OPTIONS\") {\n        return res.status(200).end();\n    }\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            message: \"Method not allowed\"\n        });\n    }\n    const clientIp = getClientIp(req);\n    // Check if IP is blocked\n    if (blockedIPs[clientIp] && blockedIPs[clientIp] > Date.now()) {\n        const timeLeft = Math.ceil((blockedIPs[clientIp] - Date.now()) / 1000 / 60);\n        return res.status(429).json({\n            message: `Too many failed login attempts. Please try again in ${timeLeft} minutes.`\n        });\n    } else if (blockedIPs[clientIp] && blockedIPs[clientIp] <= Date.now()) {\n        delete blockedIPs[clientIp]; // Unblock if time has passed\n        delete failedLoginAttempts[clientIp]; // Also clear attempts\n    }\n    try {\n        // Initialize database if not already done\n        if (!dbInitialized) {\n            try {\n                await (0,_src_lib_db__WEBPACK_IMPORTED_MODULE_2__.initializeDB)();\n                dbInitialized = true;\n                console.log(\"DB initialized in auth API\");\n            } catch (dbError) {\n                console.error(\"Failed to initialize database:\", dbError);\n                return res.status(500).json({\n                    message: \"Database initialization failed\",\n                    error: dbError instanceof Error ? dbError.message : String(dbError)\n                });\n            }\n        }\n        const { username, password } = req.body;\n        if (!username || !password) {\n            return res.status(400).json({\n                message: \"Username and password are required\"\n            });\n        }\n        const db = await (0,_src_lib_db__WEBPACK_IMPORTED_MODULE_2__.getDB)();\n        const user = await db.get(\"SELECT * FROM users WHERE username = ?\", [\n            username\n        ]);\n        if (!user) {\n            // Generic message for non-existent user or wrong password to prevent username enumeration\n            // Increment failed attempts\n            failedLoginAttempts[clientIp] = failedLoginAttempts[clientIp] || {\n                count: 0,\n                lastAttempt: 0\n            };\n            if (Date.now() - failedLoginAttempts[clientIp].lastAttempt > ATTEMPT_WINDOW_MS) {\n                failedLoginAttempts[clientIp].count = 1; // Reset count if window expired\n            } else {\n                failedLoginAttempts[clientIp].count++;\n            }\n            failedLoginAttempts[clientIp].lastAttempt = Date.now();\n            if (failedLoginAttempts[clientIp].count >= MAX_FAILED_ATTEMPTS) {\n                blockedIPs[clientIp] = Date.now() + BLOCK_DURATION_MS;\n                const timeLeft = Math.ceil(BLOCK_DURATION_MS / 1000 / 60);\n                return res.status(429).json({\n                    message: `Too many failed login attempts. Please try again in ${timeLeft} minutes.`\n                });\n            }\n            return res.status(401).json({\n                message: \"Invalid credentials\"\n            });\n        }\n        const isPasswordValid = await bcryptjs__WEBPACK_IMPORTED_MODULE_0___default().compare(password, user.password);\n        if (!isPasswordValid) {\n            // Increment failed attempts\n            failedLoginAttempts[clientIp] = failedLoginAttempts[clientIp] || {\n                count: 0,\n                lastAttempt: 0\n            };\n            if (Date.now() - failedLoginAttempts[clientIp].lastAttempt > ATTEMPT_WINDOW_MS) {\n                failedLoginAttempts[clientIp].count = 1; // Reset count if window expired\n            } else {\n                failedLoginAttempts[clientIp].count++;\n            }\n            failedLoginAttempts[clientIp].lastAttempt = Date.now();\n            if (failedLoginAttempts[clientIp].count >= MAX_FAILED_ATTEMPTS) {\n                blockedIPs[clientIp] = Date.now() + BLOCK_DURATION_MS;\n                const timeLeft = Math.ceil(BLOCK_DURATION_MS / 1000 / 60);\n                return res.status(429).json({\n                    message: `Too many failed login attempts. Please try again in ${timeLeft} minutes.`\n                });\n            }\n            return res.status(401).json({\n                message: \"Invalid credentials\"\n            });\n        }\n        // If login is successful, reset failed attempts for this IP\n        if (failedLoginAttempts[clientIp]) {\n            delete failedLoginAttempts[clientIp];\n        }\n        if (blockedIPs[clientIp]) {\n            delete blockedIPs[clientIp];\n        }\n        // Generate JWT token\n        const token = jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().sign({\n            id: user.id,\n            username: user.username\n        }, JWT_SECRET, {\n            expiresIn: \"2h\"\n        });\n        res.status(200).json({\n            token\n        });\n    } catch (error) {\n        console.error(\"Authentication error:\", error);\n        res.status(500).json({\n            message: \"Internal server error\",\n            error: error instanceof Error ? error.message : String(error)\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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R0FDdkN0QyxZQUNBO1lBQUVtRCxXQUFXO1FBQUs7UUFHcEJoQyxJQUFJRyxNQUFNLENBQUMsS0FBS0UsSUFBSSxDQUFDO1lBQUV3QjtRQUFNO0lBQy9CLEVBQUUsT0FBT2IsT0FBTztRQUNkSCxRQUFRRyxLQUFLLENBQUMseUJBQXlCQTtRQUN2Q2hCLElBQUlHLE1BQU0sQ0FBQyxLQUFLRSxJQUFJLENBQUM7WUFDbkJDLFNBQVM7WUFDVFUsT0FBT0EsaUJBQWlCQyxRQUFRRCxNQUFNVixPQUFPLEdBQUdZLE9BQU9GO1FBQ3pEO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpdGUtcmVhY3QtdHlwZXNjcmlwdC1zdGFydGVyLy4vcGFnZXMvYXBpL2F1dGgudHM/ZmJlYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0QXBpUmVxdWVzdCwgTmV4dEFwaVJlc3BvbnNlIH0gZnJvbSAnbmV4dCc7XG5pbXBvcnQgYmNyeXB0IGZyb20gJ2JjcnlwdGpzJztcbmltcG9ydCBqd3QgZnJvbSAnanNvbndlYnRva2VuJztcbmltcG9ydCB7IGdldERCLCBpbml0aWFsaXplREIgfSBmcm9tICcuLi8uLi9zcmMvbGliL2RiJztcblxuY29uc3QgSldUX1NFQ1JFVCA9IHByb2Nlc3MuZW52LkpXVF9TRUNSRVQgfHwgJ3lvdXItc2VjcmV0LWtleSc7XG5cbi8vIEluaXRpYWxpemUgREIgZmxhZ1xubGV0IGRiSW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuLy8gSW4tbWVtb3J5IHN0b3JlIGZvciBmYWlsZWQgbG9naW4gYXR0ZW1wdHMgYW5kIGJsb2NrZWQgSVBzXG5pbnRlcmZhY2UgRmFpbGVkQXR0ZW1wdCB7XG4gIGNvdW50OiBudW1iZXI7XG4gIGxhc3RBdHRlbXB0OiBudW1iZXI7XG59XG5jb25zdCBmYWlsZWRMb2dpbkF0dGVtcHRzOiBSZWNvcmQ8c3RyaW5nLCBGYWlsZWRBdHRlbXB0PiA9IHt9O1xuY29uc3QgYmxvY2tlZElQczogUmVjb3JkPHN0cmluZywgbnVtYmVyPiA9IHt9OyAvLyBTdG9yZXMgSVAgLT4gYmxvY2tlZFVudGlsIHRpbWVzdGFtcFxuXG5jb25zdCBNQVhfRkFJTEVEX0FUVEVNUFRTID0gMztcbmNvbnN0IEJMT0NLX0RVUkFUSU9OX01TID0gMTUgKiA2MCAqIDEwMDA7IC8vIDE1IG1pbnV0ZXNcbmNvbnN0IEFUVEVNUFRfV0lORE9XX01TID0gNSAqIDYwICogMTAwMDsgLy8gUmVzZXQgYXR0ZW1wdHMgaWYgbm8gbmV3IGF0dGVtcHQgaW4gNSBtaW5zXG5cbmZ1bmN0aW9uIGdldENsaWVudElwKHJlcTogTmV4dEFwaVJlcXVlc3QpOiBzdHJpbmcge1xuICBjb25zdCB4Rm9yd2FyZGVkRm9yID0gcmVxLmhlYWRlcnNbJ3gtZm9yd2FyZGVkLWZvciddO1xuICBpZiAodHlwZW9mIHhGb3J3YXJkZWRGb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHhGb3J3YXJkZWRGb3Iuc3BsaXQoJywnKVswXS50cmltKCk7XG4gIH1cbiAgY29uc3QgeFJlYWxJcCA9IHJlcS5oZWFkZXJzWyd4LXJlYWwtaXAnXTtcbiAgaWYgKHR5cGVvZiB4UmVhbElwID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB4UmVhbElwLnRyaW0oKTtcbiAgfVxuICByZXR1cm4gcmVxLnNvY2tldC5yZW1vdGVBZGRyZXNzIHx8ICd1bmtub3duJztcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihyZXE6IE5leHRBcGlSZXF1ZXN0LCByZXM6IE5leHRBcGlSZXNwb25zZSkge1xuICAvLyBTZXQgcHJvcGVyIEpTT04gY29udGVudCB0eXBlXG4gIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gIFxuICAvLyBIYW5kbGUgcHJlZmxpZ2h0IE9QVElPTlMgcmVxdWVzdCBmb3IgQ09SU1xuICBpZiAocmVxLm1ldGhvZCA9PT0gJ09QVElPTlMnKSB7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5lbmQoKTtcbiAgfVxuICBcbiAgaWYgKHJlcS5tZXRob2QgIT09ICdQT1NUJykge1xuICAgIHJldHVybiByZXMuc3RhdHVzKDQwNSkuanNvbih7IG1lc3NhZ2U6ICdNZXRob2Qgbm90IGFsbG93ZWQnIH0pO1xuICB9XG5cbiAgY29uc3QgY2xpZW50SXAgPSBnZXRDbGllbnRJcChyZXEpO1xuXG4gIC8vIENoZWNrIGlmIElQIGlzIGJsb2NrZWRcbiAgaWYgKGJsb2NrZWRJUHNbY2xpZW50SXBdICYmIGJsb2NrZWRJUHNbY2xpZW50SXBdID4gRGF0ZS5ub3coKSkge1xuICAgIGNvbnN0IHRpbWVMZWZ0ID0gTWF0aC5jZWlsKChibG9ja2VkSVBzW2NsaWVudElwXSAtIERhdGUubm93KCkpIC8gMTAwMCAvIDYwKTtcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MjkpLmpzb24oeyBtZXNzYWdlOiBgVG9vIG1hbnkgZmFpbGVkIGxvZ2luIGF0dGVtcHRzLiBQbGVhc2UgdHJ5IGFnYWluIGluICR7dGltZUxlZnR9IG1pbnV0ZXMuYCB9KTtcbiAgfSBlbHNlIGlmIChibG9ja2VkSVBzW2NsaWVudElwXSAmJiBibG9ja2VkSVBzW2NsaWVudElwXSA8PSBEYXRlLm5vdygpKSB7XG4gICAgZGVsZXRlIGJsb2NrZWRJUHNbY2xpZW50SXBdOyAvLyBVbmJsb2NrIGlmIHRpbWUgaGFzIHBhc3NlZFxuICAgIGRlbGV0ZSBmYWlsZWRMb2dpbkF0dGVtcHRzW2NsaWVudElwXTsgLy8gQWxzbyBjbGVhciBhdHRlbXB0c1xuICB9XG5cbiAgdHJ5IHtcbiAgICAvLyBJbml0aWFsaXplIGRhdGFiYXNlIGlmIG5vdCBhbHJlYWR5IGRvbmVcbiAgICBpZiAoIWRiSW5pdGlhbGl6ZWQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGluaXRpYWxpemVEQigpO1xuICAgICAgICBkYkluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgY29uc29sZS5sb2coJ0RCIGluaXRpYWxpemVkIGluIGF1dGggQVBJJyk7XG4gICAgICB9IGNhdGNoIChkYkVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBpbml0aWFsaXplIGRhdGFiYXNlOicsIGRiRXJyb3IpO1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgICAgICAgIG1lc3NhZ2U6ICdEYXRhYmFzZSBpbml0aWFsaXphdGlvbiBmYWlsZWQnLFxuICAgICAgICAgIGVycm9yOiBkYkVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBkYkVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZGJFcnJvcilcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHsgdXNlcm5hbWUsIHBhc3N3b3JkIH0gPSByZXEuYm9keTtcblxuICAgIGlmICghdXNlcm5hbWUgfHwgIXBhc3N3b3JkKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBtZXNzYWdlOiAnVXNlcm5hbWUgYW5kIHBhc3N3b3JkIGFyZSByZXF1aXJlZCcgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgZGIgPSBhd2FpdCBnZXREQigpO1xuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBkYi5nZXQoJ1NFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSA/JywgW3VzZXJuYW1lXSk7XG5cbiAgICBpZiAoIXVzZXIpIHtcbiAgICAgIC8vIEdlbmVyaWMgbWVzc2FnZSBmb3Igbm9uLWV4aXN0ZW50IHVzZXIgb3Igd3JvbmcgcGFzc3dvcmQgdG8gcHJldmVudCB1c2VybmFtZSBlbnVtZXJhdGlvblxuICAgICAgLy8gSW5jcmVtZW50IGZhaWxlZCBhdHRlbXB0c1xuICAgICAgZmFpbGVkTG9naW5BdHRlbXB0c1tjbGllbnRJcF0gPSBmYWlsZWRMb2dpbkF0dGVtcHRzW2NsaWVudElwXSB8fCB7IGNvdW50OiAwLCBsYXN0QXR0ZW1wdDogMCB9O1xuICAgICAgaWYgKERhdGUubm93KCkgLSBmYWlsZWRMb2dpbkF0dGVtcHRzW2NsaWVudElwXS5sYXN0QXR0ZW1wdCA+IEFUVEVNUFRfV0lORE9XX01TKSB7XG4gICAgICAgIGZhaWxlZExvZ2luQXR0ZW1wdHNbY2xpZW50SXBdLmNvdW50ID0gMTsgLy8gUmVzZXQgY291bnQgaWYgd2luZG93IGV4cGlyZWRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZhaWxlZExvZ2luQXR0ZW1wdHNbY2xpZW50SXBdLmNvdW50Kys7XG4gICAgICB9XG4gICAgICBmYWlsZWRMb2dpbkF0dGVtcHRzW2NsaWVudElwXS5sYXN0QXR0ZW1wdCA9IERhdGUubm93KCk7XG5cbiAgICAgIGlmIChmYWlsZWRMb2dpbkF0dGVtcHRzW2NsaWVudElwXS5jb3VudCA+PSBNQVhfRkFJTEVEX0FUVEVNUFRTKSB7XG4gICAgICAgIGJsb2NrZWRJUHNbY2xpZW50SXBdID0gRGF0ZS5ub3coKSArIEJMT0NLX0RVUkFUSU9OX01TO1xuICAgICAgICBjb25zdCB0aW1lTGVmdCA9IE1hdGguY2VpbChCTE9DS19EVVJBVElPTl9NUyAvIDEwMDAgLyA2MCk7XG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQyOSkuanNvbih7IG1lc3NhZ2U6IGBUb28gbWFueSBmYWlsZWQgbG9naW4gYXR0ZW1wdHMuIFBsZWFzZSB0cnkgYWdhaW4gaW4gJHt0aW1lTGVmdH0gbWludXRlcy5gIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgbWVzc2FnZTogJ0ludmFsaWQgY3JlZGVudGlhbHMnIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IGlzUGFzc3dvcmRWYWxpZCA9IGF3YWl0IGJjcnlwdC5jb21wYXJlKHBhc3N3b3JkLCB1c2VyLnBhc3N3b3JkKTtcbiAgICBcbiAgICBpZiAoIWlzUGFzc3dvcmRWYWxpZCkge1xuICAgICAgLy8gSW5jcmVtZW50IGZhaWxlZCBhdHRlbXB0c1xuICAgICAgZmFpbGVkTG9naW5BdHRlbXB0c1tjbGllbnRJcF0gPSBmYWlsZWRMb2dpbkF0dGVtcHRzW2NsaWVudElwXSB8fCB7IGNvdW50OiAwLCBsYXN0QXR0ZW1wdDogMCB9O1xuICAgICAgIGlmIChEYXRlLm5vdygpIC0gZmFpbGVkTG9naW5BdHRlbXB0c1tjbGllbnRJcF0ubGFzdEF0dGVtcHQgPiBBVFRFTVBUX1dJTkRPV19NUykge1xuICAgICAgICBmYWlsZWRMb2dpbkF0dGVtcHRzW2NsaWVudElwXS5jb3VudCA9IDE7IC8vIFJlc2V0IGNvdW50IGlmIHdpbmRvdyBleHBpcmVkXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmYWlsZWRMb2dpbkF0dGVtcHRzW2NsaWVudElwXS5jb3VudCsrO1xuICAgICAgfVxuICAgICAgZmFpbGVkTG9naW5BdHRlbXB0c1tjbGllbnRJcF0ubGFzdEF0dGVtcHQgPSBEYXRlLm5vdygpO1xuXG4gICAgICBpZiAoZmFpbGVkTG9naW5BdHRlbXB0c1tjbGllbnRJcF0uY291bnQgPj0gTUFYX0ZBSUxFRF9BVFRFTVBUUykge1xuICAgICAgICBibG9ja2VkSVBzW2NsaWVudElwXSA9IERhdGUubm93KCkgKyBCTE9DS19EVVJBVElPTl9NUztcbiAgICAgICAgY29uc3QgdGltZUxlZnQgPSBNYXRoLmNlaWwoQkxPQ0tfRFVSQVRJT05fTVMgLyAxMDAwIC8gNjApO1xuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MjkpLmpzb24oeyBtZXNzYWdlOiBgVG9vIG1hbnkgZmFpbGVkIGxvZ2luIGF0dGVtcHRzLiBQbGVhc2UgdHJ5IGFnYWluIGluICR7dGltZUxlZnR9IG1pbnV0ZXMuYCB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7IG1lc3NhZ2U6ICdJbnZhbGlkIGNyZWRlbnRpYWxzJyB9KTtcbiAgICB9XG5cbiAgICAvLyBJZiBsb2dpbiBpcyBzdWNjZXNzZnVsLCByZXNldCBmYWlsZWQgYXR0ZW1wdHMgZm9yIHRoaXMgSVBcbiAgICBpZiAoZmFpbGVkTG9naW5BdHRlbXB0c1tjbGllbnRJcF0pIHtcbiAgICAgIGRlbGV0ZSBmYWlsZWRMb2dpbkF0dGVtcHRzW2NsaWVudElwXTtcbiAgICB9XG4gICAgaWYgKGJsb2NrZWRJUHNbY2xpZW50SXBdKSB7IC8vIFNob3VsZCBub3QgaGFwcGVuIGlmIGFscmVhZHkgY2hlY2tlZCwgYnV0IGdvb2QgZm9yIHNhZmV0eVxuICAgICAgICBkZWxldGUgYmxvY2tlZElQc1tjbGllbnRJcF07XG4gICAgfVxuICAgIFxuICAgIC8vIEdlbmVyYXRlIEpXVCB0b2tlblxuICAgIGNvbnN0IHRva2VuID0gand0LnNpZ24oXG4gICAgICB7IGlkOiB1c2VyLmlkLCB1c2VybmFtZTogdXNlci51c2VybmFtZSB9LFxuICAgICAgSldUX1NFQ1JFVCxcbiAgICAgIHsgZXhwaXJlc0luOiAnMmgnIH1cbiAgICApO1xuXG4gICAgcmVzLnN0YXR1cygyMDApLmpzb24oeyB0b2tlbiB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdBdXRoZW50aWNhdGlvbiBlcnJvcjonLCBlcnJvcik7XG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBcbiAgICAgIG1lc3NhZ2U6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InLFxuICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKVxuICAgIH0pO1xuICB9XG59ICJdLCJuYW1lcyI6WyJiY3J5cHQiLCJqd3QiLCJnZXREQiIsImluaXRpYWxpemVEQiIsIkpXVF9TRUNSRVQiLCJwcm9jZXNzIiwiZW52IiwiZGJJbml0aWFsaXplZCIsImZhaWxlZExvZ2luQXR0ZW1wdHMiLCJibG9ja2VkSVBzIiwiTUFYX0ZBSUxFRF9BVFRFTVBUUyIsIkJMT0NLX0RVUkFUSU9OX01TIiwiQVRURU1QVF9XSU5ET1dfTVMiLCJnZXRDbGllbnRJcCIsInJlcSIsInhGb3J3YXJkZWRGb3IiLCJoZWFkZXJzIiwic3BsaXQiLCJ0cmltIiwieFJlYWxJcCIsInNvY2tldCIsInJlbW90ZUFkZHJlc3MiLCJoYW5kbGVyIiwicmVzIiwic2V0SGVhZGVyIiwibWV0aG9kIiwic3RhdHVzIiwiZW5kIiwianNvbiIsIm1lc3NhZ2UiLCJjbGllbnRJcCIsIkRhdGUiLCJub3ciLCJ0aW1lTGVmdCIsIk1hdGgiLCJjZWlsIiwiY29uc29sZSIsImxvZyIsImRiRXJyb3IiLCJlcnJvciIsIkVycm9yIiwiU3RyaW5nIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImJvZHkiLCJkYiIsInVzZXIiLCJnZXQiLCJjb3VudCIsImxhc3RBdHRlbXB0IiwiaXNQYXNzd29yZFZhbGlkIiwiY29tcGFyZSIsInRva2VuIiwic2lnbiIsImlkIiwiZXhwaXJlc0luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./pages/api/auth.ts\n");

/***/ }),

/***/ "(api)/./src/lib/db.ts":
/*!***********************!*\
  !*** ./src/lib/db.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeDB: () => (/* binding */ closeDB),\n/* harmony export */   getDB: () => (/* binding */ getDB),\n/* harmony export */   initializeDB: () => (/* binding */ initializeDB)\n/* harmony export */ });\n// Check if we're running on the server to avoid errors in the browser\nconst isServer = \"undefined\" === \"undefined\";\n// Check if database file exists\nconst doesDBFileExist = async ()=>{\n    if (!isServer) return false;\n    try {\n        const fs = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23));\n        const path = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! path */ \"path\", 23));\n        const dbPath = path.join(process.cwd(), \"data.db\");\n        return fs.existsSync(dbPath);\n    } catch (error) {\n        console.error(\"Error checking if DB file exists:\", error);\n        return false;\n    }\n};\n// Track if this is the first time initializing\nlet isFirstInitialization = true;\n// Initialize database\nasync function initializeDB() {\n    if (!isServer) {\n        throw new Error(\"Database operations can only be performed on the server\");\n    }\n    try {\n        // Check if this is the first time running or if the file exists\n        const dbFileExisted = await doesDBFileExist();\n        // Dynamic imports to avoid issues with client-side code\n        const { open } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! sqlite */ \"sqlite\"));\n        const sqlite3 = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! sqlite3 */ \"sqlite3\", 23));\n        const bcrypt = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! bcryptjs */ \"bcryptjs\", 23));\n        const path = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! path */ \"path\", 23));\n        const url = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! url */ \"url\", 23));\n        const fs = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23));\n        // Setup paths\n        const __filename = url.fileURLToPath(\"file:///home/user456/project-main-1-1/src/lib/db.ts\");\n        const __dirname = path.dirname(__filename);\n        const DB_PATH = path.join(process.cwd(), \"data.db\");\n        console.log(\"Initializing database at:\", DB_PATH);\n        const db = await open({\n            filename: DB_PATH,\n            driver: sqlite3.default.Database\n        });\n        console.log(\"Connected to database\");\n        // Create tables if they don't exist\n        await db.exec(`\n      CREATE TABLE IF NOT EXISTS users (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        username TEXT UNIQUE NOT NULL,\n        password TEXT NOT NULL,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      );\n\n      CREATE TABLE IF NOT EXISTS categories (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        name TEXT UNIQUE NOT NULL,\n        description TEXT,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      );\n\n      CREATE TABLE IF NOT EXISTS products (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        name TEXT NOT NULL,\n        description TEXT,\n        image TEXT,\n        specs TEXT,\n        useCases TEXT,\n        category TEXT,\n        images TEXT,\n        document TEXT,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (category) REFERENCES categories(name)\n      );\n      \n      CREATE TABLE IF NOT EXISTS job_openings (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        title TEXT NOT NULL,\n        department TEXT NOT NULL,\n        location TEXT NOT NULL,\n        type TEXT NOT NULL,\n        description TEXT NOT NULL,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        active INTEGER DEFAULT 1\n      );\n    `);\n        console.log(\"Database tables created\");\n        // Alter existing products table to add document column if it doesn't exist\n        try {\n            // Check if the document column exists\n            const tableInfo = await db.all(\"PRAGMA table_info(products)\");\n            const documentColumnExists = tableInfo.some((column)=>column.name === \"document\");\n            if (!documentColumnExists) {\n                // Add document column to products table\n                await db.exec(\"ALTER TABLE products ADD COLUMN document TEXT\");\n                console.log(\"Added document column to products table\");\n            }\n        } catch (error) {\n            console.error(\"Error altering products table:\", error);\n        }\n        // Check if admin user exists, if not create it\n        const adminUser = await db.get(\"SELECT * FROM users WHERE username = ?\", [\n            \"admin\"\n        ]);\n        if (!adminUser) {\n            const hashedPassword = await bcrypt.hash(\"Azerbaycan123\", 10);\n            await db.run(\"INSERT INTO users (username, password) VALUES (?, ?)\", [\n                \"admin\",\n                hashedPassword\n            ]);\n            console.log(\"Admin user created\");\n        }\n        // Initialize default categories if none exist\n        const categoriesCount = await db.get(\"SELECT COUNT(*) as count FROM categories\");\n        if (categoriesCount.count === 0) {\n            const defaultCategories = [\n                {\n                    name: \"Industrial Equipment\",\n                    description: \"Heavy-duty industrial machinery and equipment\"\n                },\n                {\n                    name: \"Safety Gear\",\n                    description: \"Personal protective equipment and safety solutions\"\n                },\n                {\n                    name: \"Measurement Tools\",\n                    description: \"Precision measurement and testing instruments\"\n                },\n                {\n                    name: \"Fluid Control\",\n                    description: \"Valves, pumps, and fluid management systems\"\n                },\n                {\n                    name: \"Power Systems\",\n                    description: \"Power generation and electrical equipment\"\n                },\n                {\n                    name: \"Construction Equipment\",\n                    description: \"Tools and equipment for construction projects\"\n                }\n            ];\n            for (const category of defaultCategories){\n                await db.run(\"INSERT INTO categories (name, description) VALUES (?, ?)\", [\n                    category.name,\n                    category.description\n                ]);\n            }\n        }\n        // Only import initial products if this is a brand new database (file didn't exist before)\n        // and the products table is empty\n        const productsCount = await db.get(\"SELECT COUNT(*) as count FROM products\");\n        if (productsCount.count === 0 && !dbFileExisted && isFirstInitialization) {\n            try {\n                // Try to load products from JSON file\n                const fs = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23));\n                const path = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! path */ \"path\", 23));\n                const productsJsonPath = path.join(process.cwd(), \"src\", \"data\", \"products.json\");\n                let products = [];\n                if (fs.existsSync(productsJsonPath)) {\n                    // Read JSON file\n                    const productsJson = fs.readFileSync(productsJsonPath, \"utf8\");\n                    products = JSON.parse(productsJson);\n                    console.log(\"Loaded products from JSON file\");\n                } else {\n                    // Fallback to default product\n                    products = [\n                        {\n                            id: 1,\n                            name: \"Sample Product\",\n                            description: \"A sample product created automatically\",\n                            image: \"https://placehold.co/600x400?text=Sample+Product\",\n                            specs: [\n                                \"Sample specification 1\",\n                                \"Sample specification 2\"\n                            ],\n                            useCases: [\n                                \"Sample use case 1\",\n                                \"Sample use case 2\"\n                            ],\n                            category: \"Sample Category\"\n                        }\n                    ];\n                    console.log(\"Using default product as fallback\");\n                }\n                // Insert products\n                for (const product of products){\n                    await db.run(\"INSERT INTO products (id, name, description, image, specs, useCases, category) VALUES (?, ?, ?, ?, ?, ?, ?)\", [\n                        product.id,\n                        product.name,\n                        product.description,\n                        product.image,\n                        JSON.stringify(product.specs),\n                        JSON.stringify(product.useCases),\n                        product.category\n                    ]);\n                }\n                console.log(`${products.length} products inserted into database`);\n            } catch (error) {\n                console.error(\"Error importing initial products:\", error);\n            }\n        }\n        // Mark that we've already initialized once\n        isFirstInitialization = false;\n        // Initialize default job openings if none exist\n        const jobOpeningsCount = await db.get(\"SELECT COUNT(*) as count FROM job_openings\");\n        if (jobOpeningsCount.count === 0) {\n            const defaultJobs = [\n                {\n                    title: \"Supply Chain Manager\",\n                    department: \"operations\",\n                    location: \"Baku, Azerbaijan\",\n                    type: \"Full-time\",\n                    description: \"Leading and optimizing supply chain operations...\"\n                },\n                {\n                    title: \"Sales Representative\",\n                    department: \"sales\",\n                    location: \"Baku, Azerbaijan\",\n                    type: \"Full-time\",\n                    description: \"Developing and maintaining client relationships...\"\n                },\n                {\n                    title: \"Logistics Coordinator\",\n                    department: \"logistics\",\n                    location: \"Baku, Azerbaijan\",\n                    type: \"Full-time\",\n                    description: \"Coordinating shipment schedules and delivery routes...\"\n                }\n            ];\n            for (const job of defaultJobs){\n                await db.run(\"INSERT INTO job_openings (title, department, location, type, description) VALUES (?, ?, ?, ?, ?)\", [\n                    job.title,\n                    job.department,\n                    job.location,\n                    job.type,\n                    job.description\n                ]);\n            }\n            console.log(\"Default job openings created\");\n        }\n        // Store the db instance in module state\n        dbInstance = db;\n        return db;\n    } catch (error) {\n        console.error(\"Database initialization error:\", error);\n        throw error;\n    }\n}\n// Get database instance\nlet dbInstance = null;\nasync function getDB() {\n    if (!isServer) {\n        throw new Error(\"Database operations can only be performed on the server\");\n    }\n    if (!dbInstance) {\n        dbInstance = await initializeDB();\n    }\n    return dbInstance;\n}\n// Close database connection\nasync function closeDB() {\n    if (!isServer) {\n        throw new Error(\"Database operations can only be performed on the server\");\n    }\n    if (dbInstance) {\n        await dbInstance.close();\n        dbInstance = null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/db.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fauth&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fauth.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();